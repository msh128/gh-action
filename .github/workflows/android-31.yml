name: "Android emulator"
on:
  workflow_dispatch:
env:
  DEBIAN_FRONTEND: noninteractive
  TZ: Asia/Jakarta
  NTFY: ${{ secrets.NTFY }}
  GH_EMAIL: ${{ secrets.GH_EMAIL }}
  SSH_J_USERNAME: ${{ secrets.SSH_J_USERNAME }}
  SSH_J_HOSTNAME_ANDROID: ${{ secrets.SSH_J_HOSTNAME_ANDROID }}
  AUTH_USERNAME: ${{ secrets.AUTH_USERNAME }}
  AUTH_PASSWORD: ${{ secrets.AUTH_PASSWORD }}
jobs:
  launch_instance:
    runs-on: ubuntu-latest
    steps:
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      - name: Restore apt packages from Action cache 
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: apache2 apache2-bin apache2-data apache2-utils aspnetcore-runtime-6.0 aspnetcore-runtime-7.0 aspnetcore-targeting-pack-6.0 aspnetcore-targeting-pack-7.0 aspnetcore-targeting-pack-8.0 dotnet-apphost-pack-6.0 dotnet-apphost-pack-7.0 dotnet-apphost-pack-8.0 dotnet-hostfxr-6.0 dotnet-runtime-6.0 dotnet-runtime-7.0 dotnet-runtime-deps-6.0 dotnet-runtime-deps-7.0 dotnet-runtime-deps-8.0 dotnet-sdk-6.0 dotnet-sdk-7.0 dotnet-targeting-pack-6.0 dotnet-targeting-pack-7.0 dotnet-targeting-pack-8.0 firefox fuse3 lib32gcc-s1 lib32stdc++6 libobjc4 netstandard-targeting-pack-2.1 ncdu novnc openbox openssh-client podman pulseaudio systemd-sysv tigervnc-standalone-server tigervnc-xorg-extension tmux tzdata ubuntu-advantage-tools ubuntu-pro-client-l10n wmctrl xserver-xorg-video-dummy
          version: 1.0
      - name: Remove pre-installed android sdk
        run: |
          sudo rm -rf /usr/local/lib/android/sdk
          sudo mkdir -p /usr/local/lib/android/sdk
          sudo chown runner:runner /usr/local/lib/android/sdk -R
      - name: Restore fully configured android sdk from Action cache
        uses: actions/cache@v4
        with:
          path: /usr/local/lib/android/sdk
          key: android-sdk
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with: 
          ssh-private-key: |
            ${{ secrets.PRIVATE_KEY_1 }}
      - name: Setup rclone
        run: |
          /bin/bash -c "curl https://rclone.org/install.sh | sudo bash" > /dev/null 2>&1
          git clone git@github.com:msh128/secrets.git
          git config --global user.email "${GH_EMAIL}"
          git config --global user.name "msh128"
          mkdir -p ~/.config/rclone
          cp -v secrets/rclone/* ~/.config/rclone/
      - name: Setup host access
        run: |
          setup_host () {
            sudo apt -yq update
            sudo apt -yq install fuse3 tmux openssh-client ncdu novnc tigervnc-standalone-server tigervnc-xorg-extension tzdata wmctrl xserver-xorg-video-dummy openbox pulseaudio 
            sudo apt -yq upgrade
            for a in autoremove purge clean; do sudo apt -yqq $a; done
            ssh-keygen -t ed25519 -q -f "$HOME/.ssh/id_ed25519" -N ""
            sudo chmod 600 "$HOME/.ssh/id_ed25519"
            curl -sL -o /usr/local/bin/ttyd $(curl -s 'https://api.github.com/repos/tsl0922/ttyd/releases/latest' | jq -r '.assets[] | select(.name|contains("x86_64")).browser_download_url') && sudo chmod a+x /usr/local/bin/ttyd
            /usr/local/bin/ttyd -p 7681 -c ${AUTH_USERNAME}:${AUTH_PASSWORD} -W -t titleFixed="ttyd - Android emulator" -t fontSize=13 -t fontFamily=monospace -m 1 /bin/bash -lc 'source ~/.bashrc; /usr/bin/tmux a || /usr/bin/tmux' &
            sudo sed -i 's/tigervncconfig -iconic &/#tigervncconfig -iconic &/g' /etc/X11/Xtigervnc-session
            vncserver -geometry 1488x716 -localhost yes -alwaysshared -SecurityTypes none :1
            websockify -D --web=/usr/share/novnc/ --web-auth --auth-plugin=BasicHTTPAuth --auth-source=${AUTH_USERNAME}:${AUTH_PASSWORD} 6080 localhost:5901
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o BatchMode=yes -o ServerAliveInterval=5 -T srv.us -R 1:127.0.0.1:7681 -R 2:127.0.0.1:6080 -R 3:127.0.0.1:5901 > /tmp/srv.us.addr 2>&1 &
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o BatchMode=yes -o ServerAliveInterval=5 -T -N ${SSH_J_USERNAME}@ssh-j.com -R ${SSH_J_HOSTNAME_ANDROID}:7681:127.0.0.1:7681 -R ${SSH_J_HOSTNAME_ANDROID}:6080:127.0.0.1:6080 -R ${SSH_J_HOSTNAME_ANDROID}:5901:127.0.0.1:5901 &
          } > /dev/null 2>&1
          connection_info () {
            while [ ! $(cat /tmp/srv.us.addr | wc -l) == 6 ]; do sleep 2; done
            curl -s -d "$(echo Android emulator; \
              echo ""; \
              echo Connect via srv.us:; \
              cat /tmp/srv.us.addr | grep ': https'; \
              echo ""; \
              echo Connect via ssh-j.com:; \
              echo 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o BatchMode=yes -o ServerAliveInterval=5 -T -N '${SSH_J_USERNAME}'@ssh-j.com -L 127.0.4.2:7681:'${SSH_J_HOSTNAME_ANDROID}':7681 -L 127.0.4.2:6080:'${SSH_J_HOSTNAME_ANDROID}':6080 -L 127.0.4.2:5901:'${SSH_J_HOSTNAME_ANDROID}':5901')" ntfy.sh/$NTFY > /dev/null 2>&1
          }
          setup_host \
            && connection_info \
            || (echo "There's a problem. Please inspect the log and your workflow file then try again"; exit)
      - name: Setup emulator
        run: |
          setup_emulator () {
            rclone copy drive:android/31 ~/.android --stats-log-level="NOTICE" --stats=1h
            DISPLAY=:1 /usr/local/lib/android/sdk/emulator/emulator -avd test -accel on -gpu host -timezone Asia/Jakarta -noaudio -no-boot-anim -memory 8192 -partition-size 14848 -netfast & 
            DISPLAY=:1 wmctrl -r "Android Emulator - test:5554" -e 0,1114,18,312,693
            while [ ! $(/usr/local/lib/android/sdk/platform-tools/adb devices | grep 'emulator-5554' | grep 'device' | wc -l) == 1 ]; do sleep 3; done
          } > /dev/null 2>&1
          setup_emulator && echo "All good. The emulator should be available soon." || echo "There's a problem."
      - name: Wait for stop signals
        run: |
          for a in {1..345}; do echo "Random GUID: $(curl -s https://www.uuidgenerator.net/api/guid)" && sleep 58; done &
          while [ ! -f /tmp/poweroff ]; do sleep 3; done
          echo Powering off the emulator
          [ $(/usr/local/lib/android/sdk/platform-tools/adb devices | grep 'emulator-5554' | grep 'device' | wc -l) == 1 ] && /usr/local/lib/android/sdk/platform-tools/adb reboot -p > /dev/null 2>&1
          echo Sync local emulator files to the cloud
          sleep 7
          rclone copy ~/.android drive:android/31 --stats-log-level="NOTICE" --stats=1h
          exit
